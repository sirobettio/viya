#!/bin/bash

usage() {
  filename=`basename "$0"`
  echo "usage: $filename -a action -i sshkey -h"
}

action=status

while [ "$1" != "" ]; do
  case $1 in
    -a | --action ) shift
                    action=$1
                    ;;
    -i | --sshkey ) shift
                    user_ssh_key=$1
                    ;;
    -h | --help )   usage
                    exit
                    ;;
    * )             usage
                    exit 1
  esac
  shift
done

ssh_key_option="-i $user_ssh_key"
if [ "$user_ssh_key" = "" ]; then
  ssh_key_option=""
fi

{% set pgpoolcservers = joiner(" ") %}
PGPOOLC_SERVERS="{% for host in groups['pgpoolc'] %}{{ pgpoolcservers() }}{{hostvars[host]['ansible_host']}}{% endfor %}"

{% set sasdatasvrcservers = joiner(" ") %}
SASDATASVRC_SERVERS="{% for host in groups['sasdatasvrc'] %}{{ sasdatasvrcservers() }}{{hostvars[host]['ansible_host']}}{% endfor %}"

startStopPostgres() {
  action=$1
  serverlist=$2
  echo "==========================================================================="
  echo " $action POSTGRES (where pgpool is installed)"
  echo "==========================================================================="
  for hst in ${serverlist}; do
    echo -ne "> $action POSTGRES on ${hst}: "
    ssh ${ssh_key_option} ${hst} "sudo systemctl $action sas-viya-sasdatasvrc-postgres; sleep 3s"
    echo " ... Done"
  done
}

startStopPostgresNodes() {
  action=$1
  echo "==========================================================================="
  echo " $action POSTGRES and PG_HBA"
  echo "===========================================================================" 
  {% for host in INVOCATION_VARIABLES %}
  ssh ${ssh_key_option} {{ hostvars[host]['ansible_host'] }} "sudo systemctl $action sas-viya-sasdatasvrc-postgres-node{% for param in INVOCATION_VARIABLES[host]['sasdatasvrc'] %}{{ param['NODE_NUMBER'] }}{% endfor %}-ct-postgresql"
  ssh ${ssh_key_option} {{ hostvars[host]['ansible_host'] }} "sudo systemctl $action sas-viya-sasdatasvrc-postgres-node{% for param in INVOCATION_VARIABLES[host]['sasdatasvrc'] %}{{ param['NODE_NUMBER'] }}{% endfor %}-ct-pg_hba"
  {% endfor %}
}

startStopPGPool() {
  action=$1
  serverlist=$2
  echo "==========================================================================="
  echo " $action PGPOOL"
  echo "==========================================================================="
  for hst in ${serverlist}; do
    echo -ne "> $action ct-pcp on ${hst}: "
    ssh ${ssh_key_option} ${hst} "sudo systemctl $action sas-viya-sasdatasvrc-postgres-pgpool0-ct-pcp"
    echo " ... Done"
  done
  for hst in ${serverlist}; do
    echo -ne "> $action ct-pgpool on ${hst}: "
    ssh ${ssh_key_option} ${hst} "sudo systemctl $action sas-viya-sasdatasvrc-postgres-pgpool0-ct-pgpool"
    echo " ... Done"
  done
  for hst in ${serverlist}; do
    echo -ne "> $action ct-pool_hba on ${hst}: "
    ssh ${ssh_key_option} ${hst} "sudo systemctl sas-viya-sasdatasvrc-postgres-pgpool0-ct-pool_hba"
    echo " ... Done"
  done
}

if [ "$action" = "stop" ]; then
	startStopPGPool $action "$PGPOOLC_SERVERS"
  echo "wait 5 sec"; sleep 5s
  startStopPostgresNodes $action
  echo "wait 5 sec"; sleep 5s
  startStopPostgres $action "$PGPOOLC_SERVERS"
else
  startStopPostgres $action "$PGPOOLC_SERVERS"
  echo "wait 10 sec"; sleep 10s
  startStopPostgresNodes $action
  echo "wait 5 sec"; sleep 5s
  startStopPGPool $action "$PGPOOLC_SERVERS"
